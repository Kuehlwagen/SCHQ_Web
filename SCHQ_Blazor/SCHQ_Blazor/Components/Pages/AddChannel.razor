@page "/addchannel"
@using Google.Protobuf.WellKnownTypes
@using Grpc.Net.Client
@using static SCHQ_Protos.SCHQ_Relations
@attribute [StreamRendering(false)]
@inject IJSRuntime JsRuntime
@inject IConfiguration Config
@inject NavigationManager Navigation

<PageTitle>SCHQ Web</PageTitle>

<h1>Add Channel</h1>
<p>
  <div class="input-group">
    <div class="form-floating">
      <input type="text" class="form-control" id="floatingInputGroupChannel" placeholder="Name" @bind-value=Name>
      <label for="floatingInputGroupChannel">Name</label>
    </div>
  </div>
</p>
<p>
  <div class="input-group">
    <div class="form-floating">
      <input type="password" class="form-control" id="floatingInputGroupPassword" placeholder="Password" @bind-value=Password>
      <label for="floatingInputGroupPassword">Password</label>
    </div>
  </div>
</p>
<p>
  <div class="input-group">
    <div class="form-floating">
      <select class="form-select" @bind=Permissions id="floatingInputGroupPermissions">
        <option value="None" selected>None</option>
        <option value="Read">Read</option>
        <option value="Write">Write</option>
      </select>
      <label for="floatingInputGroupPermissions">Permissions</label>
    </div>
  </div>
</p>
<p><button type="button" class="btn btn-primary" @onclick="Add" disabled="@ButtonIsDisabled">Add Channel</button></p>

@code {
  private string? _name;
  [SupplyParameterFromQuery]
  public string? Name {
    get { return _name; }
    set {
      _name = value;
      ButtonIsDisabled = string.IsNullOrWhiteSpace(_name);
    }
  }
  private string? Password { get; set; }
  private string? Permissions { get; set; }
  private bool ButtonIsDisabled { get; set; } = true;

  private async void Add() {
    string? gRPC_Url = Config.GetValue<string>("gRPC_Url");
    if (gRPC_Url != null && !string.IsNullOrWhiteSpace(Name)) {
      SCHQ_RelationsClient gRPC_Client = new(GrpcChannel.ForAddress(gRPC_Url, new() {
          HttpHandler = new SocketsHttpHandler() {
            PooledConnectionIdleTimeout = Timeout.InfiniteTimeSpan,
            KeepAlivePingDelay = TimeSpan.FromSeconds(60),
            KeepAlivePingTimeout = TimeSpan.FromSeconds(30),
            EnableMultipleHttp2Connections = true
          }
        }));
      SuccessReply reply = await gRPC_Client.CreateChannelAsync(new() {
        Channel = Name,
        Password = Password ?? string.Empty,
        Permissons = System.Enum.TryParse<ChannelPermissions>(Permissions, out ChannelPermissions cp) ? cp : ChannelPermissions.None });
      if (reply.Success) {
        Navigation.NavigateTo("/", true);
      }
      else {
        await JsRuntime.InvokeVoidAsync("alert", "Channel not created");
      }
    }
  }
}
