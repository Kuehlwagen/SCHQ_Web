@page "/relations"
@using Google.Protobuf.WellKnownTypes
@using Grpc.Net.Client
@using static SCHQ_Protos.SCHQ_Relations
@attribute [StreamRendering(false)]
@inject IJSRuntime JsRuntime
@inject IConfiguration Config
@inject NavigationManager Navigation

<PageTitle>SCHQ Web > Relations</PageTitle>

<h1>Relations</h1>

@if (relations == null) {
  <p><em>Loading...</em></p>
} else if (relations.Length == 0) {
  <p><em>No relations found (channel secured?)</em></p>
} else {
  <p>A list of all relations for channel <b>@Channel</b></p>
  <div>
    <input class="form-control" type="text" placeholder="Filter..." @bind="Filter" @bind:event="oninput" />
    <input type="checkbox" checked="@FilterNotAssigned" @onchange="@((args) => FilterNotAssigned = (bool?)args.Value)" /> Not assigned
    <input type="checkbox" checked="@FilterFriendly" @onchange="@((args) => FilterFriendly = (bool?)args.Value)" /> Friendly
    <input type="checkbox" checked="@FilterNeutral" @onchange="@((args) => FilterNeutral = (bool?)args.Value)" /> Neutral
    <input type="checkbox" checked="@FilterBogey" @onchange="@((args) => FilterBogey = (bool?)args.Value)" /> Bogey
    <input type="checkbox" checked="@FilterBandit" @onchange="@((args) => FilterBandit = (bool?)args.Value)" /> Bandit
  </div>
  <table class="table table-striped">
    <thead>
      <tr>
        <th scope="col">Name</th>
        <th scope="col">Action</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var relation in relations.Where(r => IsVisible(r))) {
        <tr class="@GetRelationClass(relation)">
          <td>@(relation.Type == RelationType.Handle ? "👤" : "🌐") @relation.Name</td>
          <td><button type="button" class="btn btn-dark btn-sm" @onclick="() => Rsi(relation.Type, relation.Name)">RSI Link</button></td>
        </tr>
      }
    </tbody>
  </table>
}
<p><button type="button" class="btn btn-outline-primary btn-sm" @onclick="Back">Back</button> <button type="button" class="btn btn-outline-primary btn-sm" @onclick="Refresh">Refresh</button></p>

@code {
  [SupplyParameterFromQuery]
  public string? Channel { get; set; }
  public string? Filter { get; set; }
  public bool? FilterNotAssigned { get; set; }
  public bool? FilterFriendly { get; set; } = true;
  public bool? FilterNeutral { get; set; } = true;
  public bool? FilterBogey { get; set; } = true;
  public bool? FilterBandit { get; set; } = true;

  private RelationInfo[]? relations;

  protected async override Task OnInitializedAsync() {
    string? gRPC_Url = Config.GetValue<string>("gRPC_Url");
    if (gRPC_Url != null) {
      SCHQ_RelationsClient gRPC_Client = new(GrpcChannel.ForAddress(gRPC_Url, new() {
          HttpHandler = new SocketsHttpHandler() {
            PooledConnectionIdleTimeout = Timeout.InfiniteTimeSpan,
            KeepAlivePingDelay = TimeSpan.FromSeconds(60),
            KeepAlivePingTimeout = TimeSpan.FromSeconds(30),
            EnableMultipleHttp2Connections = true
          }
        }));
      RelationsReply reply = await gRPC_Client.GetRelationsAsync(new() { Channel = Channel });
      relations = [.. reply?.Relations];
    }
  }

  public bool IsVisible(RelationInfo relation)
  {
    bool? v = relation.Relation switch {
      RelationValue.NotAssigned => FilterNotAssigned,
      RelationValue.Friendly => FilterFriendly,
      RelationValue.Neutral => FilterNeutral,
      RelationValue.Bogey => FilterBogey,
      RelationValue.Bandit => FilterBandit,
      _ => false
    } ?? false;
    return (string.IsNullOrWhiteSpace(Filter) || relation.Name.Contains(Filter, StringComparison.InvariantCultureIgnoreCase)) && v.Value;
  }

  public string GetRelationClass(RelationInfo relation) {
    return relation.Relation switch {
      RelationValue.Friendly => "p-3 mb-2 bg-success text-white",
      RelationValue.Neutral => "p-3 mb-2 bg-secondary text-white",
      RelationValue.Bogey => "p-3 mb-2 bg-warning text-dark",
      RelationValue.Bandit => "p-3 mb-2 bg-danger text-white",
      _ => "p-3 mb-2 bg-transparent text-dark"
    };
  }

  private async void Rsi(RelationType type, string name) {
    await JsRuntime.InvokeVoidAsync("open", $"https://robertsspaceindustries.com/{(type == RelationType.Handle ? "citizens" : "orgs")}/{name}", "_blank");
  }

  private void Refresh() {
    Navigation.Refresh(true);
  }

  private void Back() {
    Navigation.NavigateTo("/");
  }
}
