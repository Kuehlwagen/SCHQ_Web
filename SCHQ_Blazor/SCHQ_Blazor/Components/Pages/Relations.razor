@page "/relations"
@using Google.Protobuf.WellKnownTypes
@using Grpc.Core
@using Grpc.Net.Client
@using static SCHQ_Protos.SCHQ_Relations
@attribute [StreamRendering(false)]
@inject IConfiguration Config

<PageTitle>SCHQ Web</PageTitle>

<h1>Relations</h1>

@if (relations == null) {
  <p><em>Loading relations  for channel <b>@Channel</b>...</em></p>
} else if (relations.Length == 0) {
  <p><em>No relations found for channel <b>@Channel</b></em></p>
  <p>
    <div class="input-group">
      <div class="form-floating">
        <input type="password" class="form-control" id="floatingInputGroupChannelPassword" placeholder="Channel Password" @bind-value=ChannelPassword disabled="@(SyncActive)">
        <label for="floatingInputGroupChannelPassword">Channel Password</label>
      </div>
      <button class="btn btn-primary" type="button" @onclick="GetRelations" disabled="@SyncActive">
        <svg class="bi" width="16" height="16" fill="currentColor">
          <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#download" />
        </svg>
      </button>
      <button class="@(SyncButtonClass)" type="button" @onclick="SyncRelations">
        <span class="spinner-border spinner-border-sm" aria-hidden="true" hidden="@(!SyncActive)" />
        <svg class="bi" width="16" height="16" fill="currentColor" hidden="@SyncActive">
          <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#arrow-repeat" />
        </svg>
      </button>
    </div>
  </p>
} else {
  <p>All relations for channel <b>@Channel</b></p>
  <p>
    <div class="input-group">
      <div class="form-floating">
        <input type="password" class="form-control" id="floatingInputGroupChannelPassword" placeholder="Channel Password" @bind-value=ChannelPassword disabled="@(SyncActive)">
        <label for="floatingInputGroupChannelPassword">Channel Password</label>
      </div>
      <button class="btn btn-primary" type="button" @onclick="GetRelations" disabled="@SyncActive">
        <svg class="bi" width="16" height="16" fill="currentColor">
          <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#download" />
        </svg>
      </button>
      <button class="@(SyncButtonClass)" type="button" @onclick="SyncRelations">
        <span class="spinner-border spinner-border-sm" aria-hidden="true" hidden="@(!SyncActive)" />
        <svg class="bi" width="16" height="16" fill="currentColor" hidden="@SyncActive">
          <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#arrow-repeat" />
        </svg>
      </button>
    </div>
  </p>
  <p>
    <div class="input-group">
      <div class="form-floating">
        <select class="form-select" @bind=AddType id="floatingInputGroupType">
          <option value="0" selected>Handle</option>
          <option value="1">Org</option>
        </select>
        <label for="floatingInputGroupType">Type</label>
      </div>
      <div class="form-floating">
        <input type="text" class="form-control" id="floatingInputGroupAddHandle" placeholder="Name" @bind=AddName @bind:event="oninput">
        <label for="floatingInputGroupAddHandle">Name</label>
      </div>
      <button type="button" class="btn btn-success btn-sm text-white p-2" @onclick="() => SetRelation(RelationValue.Friendly)" disabled="@(string.IsNullOrWhiteSpace(AddName))">FR</button>
      <button type="button" class="btn btn-secondary btn-sm text-white p-2" @onclick="() => SetRelation(RelationValue.Neutral)" disabled="@(string.IsNullOrWhiteSpace(AddName))">NE</button>
      <button type="button" class="btn btn-warning btn-sm text-white p-2" @onclick="() => SetRelation(RelationValue.Bogey)" disabled="@(string.IsNullOrWhiteSpace(AddName))">BO</button>
      <button type="button" class="btn btn-danger btn-sm text-white p-2" @onclick="() => SetRelation(RelationValue.Bandit)" disabled="@(string.IsNullOrWhiteSpace(AddName))">BA</button>
    </div>
  </p>
  <div class="input-group">
    <div class="form-floating">
      <input type="text" class="form-control" id="floatingInputGroupFilter" placeholder="Filter" @bind="Filter" @bind:event="oninput">
      <label for="floatingInputGroupFilter">Filter</label>
    </div>
    <div class="input-group-text bg-success p-2">
      <input class="form-check-input mt-0 bg-success border-white" type="checkbox" value="" checked="@FilterFriendly" @onchange="@((args) => FilterFriendly = (bool?)args.Value)">
    </div>
    <div class="input-group-text bg-secondary p-2">
      <input class="form-check-input mt-0 bg-secondary border-white" type="checkbox" value="" checked="@FilterNeutral" @onchange="@((args) => FilterNeutral = (bool?)args.Value)">
    </div>
    <div class="input-group-text bg-warning p-2">
      <input class="form-check-input mt-0 bg-warning border-white" type="checkbox" value="" checked="@FilterBogey" @onchange="@((args) => FilterBogey = (bool?)args.Value)">
    </div>
    <div class="input-group-text bg-danger p-2">
      <input class="form-check-input mt-0 bg-danger border-white" type="checkbox" value="" checked="@FilterBandit" @onchange="@((args) => FilterBandit = (bool?)args.Value)">
    </div>
    <div class="input-group-text bg-dark p-2">
      <input class="form-check-input mt-0 bg-dark border-white" type="checkbox" value="" checked="@FilterNotAssigned" @onchange="@((args) => FilterNotAssigned = (bool?)args.Value)">
    </div>
    <div class="input-group-text bg-info p-2">
      <input class="form-check-input mt-0 bg-info border-white" type="checkbox" value="" checked="@FilterOrganization" @onchange="@((args) => FilterOrganization = (bool?)args.Value)">
    </div>
  </div>
  <table class="table table-striped">
    <thead>
      <tr>
        <th scope="col" width="1%">Type</th>
        <th scope="col">Name</th>
        <th scope="col" width="1%">Action</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var relation in relations.Where(r => IsVisible(r))) {
        <tr>
          <td class="@GetRelationClass(relation)">
            <svg class="bi" width="16" height="16" fill="currentColor">
              @if (relation.Type == RelationType.Handle) {
                <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#person" />
              } else {
                <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#globe" />
              }
            </svg>
          </td>
          <td class="align-middle">@relation.Name</td>
          <td class="align-middle">
            <div class="btn-group" role="group">
              @if (relation.Relation != RelationValue.Friendly) {
                <button type="button" class="btn btn-success btn-sm text-white p-2" @onclick="() => SetRelation(relation, RelationValue.Friendly)">FR</button>
              }
              @if (relation.Relation != RelationValue.Neutral) {
                <button type="button" class="btn btn-secondary btn-sm text-white p-2" @onclick="() => SetRelation(relation, RelationValue.Neutral)">NE</button>
              }
              @if (relation.Relation != RelationValue.Bogey) {
                <button type="button" class="btn btn-warning btn-sm text-white p-2" @onclick="() => SetRelation(relation, RelationValue.Bogey)">BO</button>
              }
              @if (relation.Relation != RelationValue.Bandit) {
                <button type="button" class="btn btn-danger btn-sm text-white p-2" @onclick="() => SetRelation(relation, RelationValue.Bandit)">BA</button>
              }
              @if (relation.Relation != RelationValue.NotAssigned) {
                <button type="button" class="btn btn-dark btn-sm text-white p-2" @onclick="() => SetRelation(relation, RelationValue.NotAssigned)">NA</button>
              }
            </div>
          </td>
        </tr>
      }
    </tbody>
  </table>
}

@code {
  [SupplyParameterFromQuery]
  public string? Channel { get; set; }
  private string? ChannelPassword { get; set; }
  public string? Filter { get; set; }
  public bool? FilterNotAssigned { get; set; }
  public bool? FilterFriendly { get; set; } = true;
  public bool? FilterNeutral { get; set; } = true;
  public bool? FilterBogey { get; set; } = true;
  public bool? FilterBandit { get; set; } = true;
  public bool? FilterOrganization { get; set; } = true;
  public bool SyncActive { get; set; } = false;
  public string SyncButtonClass {
    get {
      return SyncActive ? "btn btn-success" : "btn btn-danger";
    }
  }
  public string? AddName { get; set; }
  public string? AddType { get; set; }

  private RelationInfo[]? relations;
  private CancellationTokenSource? CTS;

  protected async override Task OnInitializedAsync() {
    await GetRelations();
  }

  private async Task GetRelations() {
    string? gRPC_Url = Config.GetValue<string>("gRPC_Url");
    if (gRPC_Url != null && !string.IsNullOrWhiteSpace(Channel)) {
      SCHQ_RelationsClient gRPC_Client = new(GrpcChannel.ForAddress(gRPC_Url, new() {
          HttpHandler = new SocketsHttpHandler() {
            PooledConnectionIdleTimeout = Timeout.InfiniteTimeSpan,
            KeepAlivePingDelay = TimeSpan.FromSeconds(60),
            KeepAlivePingTimeout = TimeSpan.FromSeconds(30),
            EnableMultipleHttp2Connections = true
          }
        }));
      RelationsReply reply = await gRPC_Client.GetRelationsAsync(new() { Channel = Channel, Password = ChannelPassword ?? string.Empty });
      relations = [.. reply?.Relations];
    }
  }

  private async void SetRelation(RelationInfo relation, RelationValue value) {
    string? gRPC_Url = Config.GetValue<string>("gRPC_Url");
    if (gRPC_Url != null) {
      SCHQ_RelationsClient gRPC_Client = new(GrpcChannel.ForAddress(gRPC_Url, new() {
        HttpHandler = new SocketsHttpHandler() {
          PooledConnectionIdleTimeout = Timeout.InfiniteTimeSpan,
          KeepAlivePingDelay = TimeSpan.FromSeconds(60),
          KeepAlivePingTimeout = TimeSpan.FromSeconds(30),
          EnableMultipleHttp2Connections = true
        }
      }));
      SuccessReply reply = await gRPC_Client.SetRelationAsync(new() {
        Channel = Channel,
        Relation = new() {
          Type = relation.Type,
          Name = relation.Name,
          Relation = value
        }
      });
      if (reply.Success && relations != null) {
        if (relations.Any(r => r.Type == relation.Type && r.Name == relation.Name)) {
          relations.First(r => r.Type == relation.Type && r.Name == relation.Name).Relation = value;
        } else {
          relations = [.. relations.Concat([relation]).OrderByDescending(r => r.Type).ThenBy(r => r.Name)];
        }
        StateHasChanged();
      }
    }
  }

  private void SetRelation(RelationValue value) {
    SetRelation(new RelationInfo() {
      Type = (RelationType)int.Parse(AddType ?? "0"),
      Name = AddName,
      Relation = value
    }, value);
    AddName = string.Empty;
  }

  private async void SyncRelations() {
    string? gRPC_Url = Config.GetValue<string>("gRPC_Url");
    if (gRPC_Url != null) {
      try {
        if (SyncActive) {
          if (CTS != null && !CTS.IsCancellationRequested) {
            CTS.Cancel(true);
          }
          SyncActive = false;
        } else {
          SyncActive = true;
          CTS = new();
          await GetRelations();
          StateHasChanged();
          SCHQ_RelationsClient gRPC_Client = new(GrpcChannel.ForAddress(gRPC_Url, new() {
              HttpHandler = new SocketsHttpHandler() {
                PooledConnectionIdleTimeout = Timeout.InfiniteTimeSpan,
                KeepAlivePingDelay = TimeSpan.FromSeconds(60),
                KeepAlivePingTimeout = TimeSpan.FromSeconds(30),
                EnableMultipleHttp2Connections = true
              }
            }));
          using var streamingCall = gRPC_Client.SyncRelations(new() { Channel = Channel, Password = ChannelPassword ?? string.Empty }, cancellationToken: CTS.Token);
          try {
            await foreach (SyncRelationsReply rel in streamingCall.ResponseStream.ReadAllAsync(cancellationToken: CTS.Token)) {
              if (relations?.Any(r => r.Type == rel.Relation.Type && r.Name == rel.Relation.Name) ?? false) {
                relations.First(r => r.Type == rel.Relation.Type && r.Name == rel.Relation.Name).Relation = rel.Relation.Relation;
              } else {
                relations = [.. relations?.Concat([rel.Relation]).OrderByDescending(r => r.Type).ThenBy(r => r.Name)];
              }
              StateHasChanged();
            }
          } catch { }
          SyncActive = false;
          StateHasChanged();
        }
      } catch { }
    }
  }

  public bool IsVisible(RelationInfo relation)
  {
    return (string.IsNullOrWhiteSpace(Filter) || relation.Name.Contains(Filter, StringComparison.InvariantCultureIgnoreCase)) &&
    (relation.Relation switch {
      RelationValue.NotAssigned => FilterNotAssigned,
      RelationValue.Friendly => FilterFriendly,
      RelationValue.Neutral => FilterNeutral,
      RelationValue.Bogey => FilterBogey,
      RelationValue.Bandit => FilterBandit,
      _ => false
    } ?? false) &&
    (relation.Type == RelationType.Handle || (FilterOrganization.HasValue && FilterOrganization.Value));
  }

  public string GetRelationClass(RelationInfo relation) {
    return relation.Relation switch {
      RelationValue.NotAssigned => "p-3 mb-2 bg-dark text-white",
      RelationValue.Friendly => "p-3 mb-2 bg-success text-white",
      RelationValue.Neutral => "p-3 mb-2 bg-secondary text-white",
      RelationValue.Bogey => "p-3 mb-2 bg-warning text-white",
      RelationValue.Bandit => "p-3 mb-2 bg-danger text-white",
      _ => "p-3 mb-2 bg-transparent text-dark"
    };
  }
}
