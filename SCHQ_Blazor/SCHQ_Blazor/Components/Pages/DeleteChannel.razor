@page "/deletechannel"
@using Google.Protobuf.WellKnownTypes
@using Grpc.Net.Client
@using static SCHQ_Protos.SCHQ_Relations
@attribute [StreamRendering(false)]
@inject IJSRuntime JsRuntime
@inject IConfiguration Config
@inject NavigationManager Navigation

<PageTitle>SCHQ Web</PageTitle>

<h1>Delete Channel</h1>

@if (string.IsNullOrWhiteSpace(Channel)) {
  <p>No channel name provided</p>
} else {
  <p>Delete channel <b>@Channel</b></p>
  <p><b>Channel Password:</b><br /><input type="password" placeholder="Password" @bind-value=Password /></p>
  <p><button type="button" class="btn btn-outline-primary btn-sm" @onclick="Back">Back</button> <button type="button" class="btn btn-danger btn-sm" @onclick="Delete">Delete Channel</button></p>
}

@code {
  [SupplyParameterFromQuery]
  public string? Channel { get; set; }
  private string? Password;

  private async void Delete() {
    bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Do you really want to delete gRPC channel [{Channel}]?");
    if (confirmed) {
      string? gRPC_Url = Config.GetValue<string>("gRPC_Url");
      if (gRPC_Url != null) {
        SCHQ_RelationsClient gRPC_Client = new(GrpcChannel.ForAddress(gRPC_Url, new() {
            HttpHandler = new SocketsHttpHandler() {
              PooledConnectionIdleTimeout = Timeout.InfiniteTimeSpan,
              KeepAlivePingDelay = TimeSpan.FromSeconds(60),
              KeepAlivePingTimeout = TimeSpan.FromSeconds(30),
              EnableMultipleHttp2Connections = true
            }
          }));
        SuccessReply reply = await gRPC_Client.DeleteChannelAsync(new() { Channel = Channel, Password = Password ?? string.Empty });
        if (reply.Success) {
          Navigation.NavigateTo("/", true);
        } else {
          await JsRuntime.InvokeVoidAsync("alert", "Channel not deleted (wrong password?)");
        }
      }
    }
  }

  private void Back() {
    Navigation.NavigateTo("/");
  }
}
