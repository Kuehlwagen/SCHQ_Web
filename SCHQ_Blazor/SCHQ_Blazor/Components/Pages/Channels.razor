@page "/"
@using Google.Protobuf.WellKnownTypes
@using Grpc.Net.Client
@using static SCHQ_Protos.SCHQ_Relations
@attribute [StreamRendering(false)]
@inject IConfiguration Config
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>SCHQ Web</PageTitle>

<h1>Channels</h1>

@if (channels == null) {
  <p><em>Loading...</em></p>
} else if (channels.Length == 0) {
  <p><em>No channels found</em></p>
} else {
  <p>
    <div class="input-group">
      <div class="form-floating">
        <input type="text" class="form-control" id="floatingInputGroupChannelFilter" placeholder="Filter" @bind=Filter @bind:event="oninput">
        <label for="floatingInputGroupChannelFilter">Filter</label>
      </div>
      <button class="btn btn-primary" type="button" @onclick="GetChannels">
        <svg class="bi" width="16" height="16" fill="currentColor">
          <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#arrow-clockwise" />
        </svg>
      </button>
    </div>
  </p>
  <table class="table table-striped" >
    <thead>
      <tr>
        <th>Name</th>
        <th width="1%">Secured</th>
        <th width="1%">Permissions</th>
        <th width="1%">Action</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var channel in channels.Where(c => IsVisible(c))) {
        <tr>
          <td class="align-middle"><a href="" @onclick="() => Relations(channel.Name)">@channel.Name</a></td>
          <td class="align-middle">@(channel.HasPassword ? "🔒" : "🔓")</td>
          <td class="align-middle">@channel.Permissions</td>
          <td class="align-middle text-end">
            <div class="btn-group">
              <button type="button" class="btn btn-primary btn-sm p-2" @onclick="async () => ManageChannel(channel.Name)">
                <svg class="bi" width="14" height="14" fill="currentColor">
                  <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#gear" />
                </svg>
              </button>
            </div>
          </td>
        </tr>
      }
    </tbody>
  </table>
}

@code {
  private ChannelInfo[]? channels;
  public string? Filter { get; set; }

  protected async override Task OnInitializedAsync() {
    await GetChannels();
  }

  private async Task GetChannels() {
    string? gRPC_Url = Config.GetValue<string>("gRPC_Url");
    if (gRPC_Url != null) {
      SCHQ_RelationsClient gRPC_Client = new(GrpcChannel.ForAddress(gRPC_Url, new() {
        HttpHandler = new SocketsHttpHandler() {
          PooledConnectionIdleTimeout = Timeout.InfiniteTimeSpan,
          KeepAlivePingDelay = TimeSpan.FromSeconds(60),
          KeepAlivePingTimeout = TimeSpan.FromSeconds(30),
          EnableMultipleHttp2Connections = true
        }
      }));
      ChannelsReply reply = await gRPC_Client.GetChannelsAsync(new());
      channels = [.. reply?.Channels];
    }
  }

  public bool IsVisible(ChannelInfo channel) {
    if (string.IsNullOrWhiteSpace(Filter))
      return true;

    if (channel.Name.Contains(Filter, StringComparison.InvariantCultureIgnoreCase))
      return true;

    return false;
  }

  private void ManageChannel(string channel) {
    Navigation.NavigateTo($"managechannel?channel={channel}");
  }

  private void Relations(string channel) {
    Navigation.NavigateTo($"relations?channel={channel}");
  }
}
