@page "/"
@using Google.Protobuf.WellKnownTypes
@using Grpc.Net.Client
@using static SCHQ_Protos.SCHQ_Relations
@attribute [StreamRendering(false)]
@inject IConfiguration Config
@inject NavigationManager Navigation

<PageTitle>SCHQ Web > Channels</PageTitle>

<h1>Channels</h1>

@if (channels == null) {
  <p><em>Loading...</em></p>
} else if (channels.Length == 0) {
  <p><em>No channels found</em></p>
} else {
  <p>A list of all available channels</p>
  <div>
    <input class="form-control" type="text" placeholder="Filter..." @bind="Filter" @bind:event="oninput" />
  </div>
  <table class="table table-striped" >
    <thead>
      <tr>
        <th>Name</th>
        <th>Secured</th>
        <th>Permissions</th>
        <th>Action</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var channel in channels.Where(c => IsVisible(c))) {
        <tr>
          <td><a href="" @onclick="() => Relations(channel.Name)">@channel.Name</a></td>
          <td>@(channel.HasPassword ? "🔒" : "🔓")</td>
          <td>@channel.Permissions</td>
          <td><button type="button" class="btn btn-danger btn-sm" @onclick="async () => DeleteChannel(channel.Name)">Delete</button></td>
        </tr>
      }
    </tbody>
  </table>
}
<button type="button" class="btn btn-outline-primary btn-sm" @onclick="Refresh">Refresh</button>

@code {
  private ChannelInfo[]? channels;
  public string? Filter { get; set; }

  protected async override Task OnInitializedAsync() {
    string? gRPC_Url = Config.GetValue<string>("gRPC_Url");
    if (gRPC_Url != null) {
      SCHQ_RelationsClient gRPC_Client = new(GrpcChannel.ForAddress(gRPC_Url, new() {
          HttpHandler = new SocketsHttpHandler() {
            PooledConnectionIdleTimeout = Timeout.InfiniteTimeSpan,
            KeepAlivePingDelay = TimeSpan.FromSeconds(60),
            KeepAlivePingTimeout = TimeSpan.FromSeconds(30),
            EnableMultipleHttp2Connections = true
          }
        }));
      ChannelsReply reply = await gRPC_Client.GetChannelsAsync(new());
      channels = [.. reply?.Channels];
    }
  }

  public bool IsVisible(ChannelInfo channel) {
    if (string.IsNullOrWhiteSpace(Filter))
      return true;

    if (channel.Name.Contains(Filter, StringComparison.InvariantCultureIgnoreCase))
      return true;

    return false;
  }

  private void DeleteChannel(string channel) {
    Navigation.NavigateTo($"deletechannel?channel={channel}");
  }

  private void Relations(string channel) {
    Navigation.NavigateTo($"relations?channel={channel}");
  }

  private void Refresh() {
    Navigation.Refresh(true);
  }
}
