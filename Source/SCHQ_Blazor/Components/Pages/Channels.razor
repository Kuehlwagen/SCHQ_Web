@page "/"
@using SCHQ_Blazor.Classes
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Web
@using SCHQ_Blazor.Services
@using static SCHQ_Protos.SCHQ_Relations
@attribute [StreamRendering(false)]
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IStringLocalizer<Resource> Localizer
@inject SCHQ_Service SCHQ

<PageTitle>SCHQ Web > @Localizer["Channels"]</PageTitle>

<h1>@Localizer["Channels"]</h1>

@if (channels == null) {
  <p><em>@Localizer["Loading"]...</em></p>
} else {
  <p>
    <div class="btn-group">
      <button type="button" class="btn btn-primary btn-sm p-2" @onclick="AddChannel" title="@Localizer["Add Channel"]">
        @Localizer["Add Channel"]
      </button>
    </div>
  </p>
  <p>
    <div class="input-group">
      <div class="form-floating">
        <input type="text" class="form-control" id="floatingInputGroupChannelFilter" placeholder="@Localizer["Filter"]" @bind=Filter @bind:event="oninput">
        <label for="floatingInputGroupChannelFilter">@Localizer["Filter"]</label>
      </div>
      <button class="btn btn-primary" type="button" @onclick="GetChannels" title="@Localizer["Refresh Channels"]">
        <svg class="bi" width="16" height="16" fill="currentColor">
          <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#arrow-clockwise" />
        </svg>
      </button>
    </div>
  </p>
  <table class="table table-striped">
    <thead>
      <tr>
        <th>@Localizer["Name"]</th>
        <th width="1%">@Localizer["Perm."]</th>
        <th width="1%">@Localizer["Mng."]</th>
      </tr>
    </thead>
    <tbody>
      <tr class="border-1" hidden="@(!IsVisible(new() { Name = Localizer["Local Storage"], Description = Localizer["Store on your browser"] }))">
        <td class="align-middle" style="transform: rotate(0);">
          <a href="" class="link-underline link-underline-opacity-0 link-underline-opacity-50-hover stretched-link" @onclick="() => LocalStorage(string.Empty)">
            @Localizer["Local Storage"]
          </a>
          <div class="text-muted">
            <small>@Localizer["Store on your browser"]</small>
          </div>
        </td>
        <td class="align-middle" style="transform: rotate(0);">
          <svg class="bi text-lighter" width="18" height="18" fill="currentColor">
            <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#house-heart" />
          </svg>
        </td>
        <td class="align-middle text-end">
          <div class="btn-group">
            <button type="button" class="btn btn-secondary btn-sm p-2" disabled="@true">
              <svg class="bi" width="14" height="14" fill="currentColor">
                <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#x-lg" />
              </svg>
            </button>
          </div>
        </td>
      </tr>
      @foreach (var localChannelName in localChannels!) {
        <tr class="border-1" hidden="@(!IsVisible(new() { Name = localChannelName }))">
          <td class="align-middle" style="transform: rotate(0);">
            <a href="" class="link-underline link-underline-opacity-0 link-underline-opacity-50-hover stretched-link" @onclick="() => LocalStorage(localChannelName)">
              @localChannelName
            </a>
          </td>
          <td class="align-middle" style="transform: rotate(0);">
            <svg class="bi text-lighter" width="18" height="18" fill="currentColor">
              <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#house-heart" />
            </svg>
          </td>
          <td class="align-middle text-end">
            <div class="btn-group">
              <button type="button" class="btn btn-danger btn-sm p-2" @onclick="async () => DeleteLocalStorage(localChannelName)" title="@Localizer["Delete Channel"]">
                <svg class="bi" width="14" height="14" fill="currentColor">
                  <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#x-lg" />
                </svg>
              </button>
            </div>
          </td>
        </tr>
      }
      @foreach (var channel in channels.Where(c => IsVisible(c))) {
        <tr class="border-1">
          <td class="align-middle" style="transform: rotate(0);">
            <a href="" class="link-underline link-underline-opacity-0 link-underline-opacity-50-hover stretched-link@(!channel.HasPassword ? " fst-italic text-secondary" : string.Empty)" @onclick="() => Relations(channel.Name)">
              @channel.Name
            </a>
            <div class="text-muted" hidden="@(string.IsNullOrWhiteSpace(channel.Description))">
              <small>@channel.Description</small>
            </div>
          </td>
          <td class="align-middle" style="transform: rotate(0);">
            <svg class="bi text-lighter" width="18" height="18" fill="currentColor">
              @if (channel.Permissions == ChannelPermissions.Write) {
                <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#pencil-square" />
              } else if (channel.Permissions == ChannelPermissions.Read) {
                <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#eye" />
              } else {
                <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#shield-lock" />
              }
            </svg>
          </td>
          <td class="align-middle text-end">
            <div class="btn-group">
              <button type="button" class="btn btn-primary btn-sm p-2" @onclick="async() => ManageChannel(channel.Name)" title="@Localizer["Manage Channel"]">
                <svg class="bi" width="14" height="14" fill="currentColor">
                  <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#gear" />
                </svg>
              </button>
            </div>
          </td>
        </tr>
      }
    </tbody>
  </table>
  <p>
    <div class="input-group">
      <div class="form-floating">
        <input type="text" class="form-control" id="floatingInputChannel" placeholder="@Localizer["Channel"]" @bind=ChannelName @bind:event="oninput">
        <label for="floatingInputChannel">@Localizer["Channel"]</label>
      </div>
      <button disabled="@ChannelNameInactive" class="btn btn-primary" type="button" @onclick ="async () => Relations(ChannelName)" title="@Localizer["Relations"]">
        <svg class="bi" width="16" height="16" fill="currentColor">
          <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#search" />
        </svg>
      </button>
      <button disabled="@ChannelNameInactive" class="btn btn-primary" type="button" @onclick="async () => ManageChannel(ChannelName)" title="@Localizer["Manage Channel"]">
        <svg class="bi" width="16" height="16" fill="currentColor">
          <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#gear" />
        </svg>
      </button>
    </div>
  </p>
}

@code {
  private ChannelInfo[]? channels;
  private string[]? localChannels;
  public string? Filter { get; set; }
  public bool ChannelNameInactive { get; set; } = true;
  private string? _channelName = string.Empty;
  public string? ChannelName
  {
    get {
      return _channelName;
    }
    set {
      ChannelNameInactive = string.IsNullOrWhiteSpace(value);
      _channelName = value;
    }
  }

  protected async override Task OnInitializedAsync() {
    await GetChannels();
    StateHasChanged();
  }

  private async Task GetChannels() {
    ChannelsReply reply = await SCHQ.GetChannels();
    channels = [.. reply?.Channels!];
    localChannels = [];
    string? channelsJson = await LocalStorageService.GetValue(JS, "channels");
    if (!string.IsNullOrWhiteSpace(channelsJson)) {
      localChannels = JsonSerializer.Deserialize<string[]>(channelsJson) ?? [];
      if (localChannels.Length > 1) {
        Array.Sort(localChannels);
      }
    }
  }

  public bool IsVisible(ChannelInfo channel) {
    return string.IsNullOrWhiteSpace(Filter) ||
      channel.Name.Contains(Filter, StringComparison.InvariantCultureIgnoreCase) ||
      channel.Description.Contains(Filter, StringComparison.InvariantCultureIgnoreCase);
  }

  private async void DeleteLocalStorage(string? channelName) {
    bool confirmed = await JS.InvokeAsync<bool>("confirm", $"{Localizer["Local Storage"]} - {channelName}:{Environment.NewLine}{Localizer["Do you really want to delete the channel?"]}");
    if (confirmed) {
      string[] channels = [];
      string? channelsJson = await LocalStorageService.GetValue(JS, "channels");
      if (!string.IsNullOrWhiteSpace(channelsJson)) {
        channels = JsonSerializer.Deserialize<string[]>(channelsJson) ?? [];
      }
      string? channel = channels.FirstOrDefault(c => c.Equals(channelName, StringComparison.InvariantCultureIgnoreCase));
      if (!string.IsNullOrWhiteSpace(channel)) {
        channels = channels.Where(c => c != channel).ToArray();
      }
      localChannels = channels;
      if (channels.Length > 0) {
        await LocalStorageService.SetValue(JS, "channels", JsonSerializer.Serialize(channels, new JsonSerializerOptions() { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull }));
      } else {
        await LocalStorageService.RemoveValue(JS, "channels");
      }
      await LocalStorageService.RemoveValue(JS, $"relations{channelName}");
      StateHasChanged();
    }
  }

  private void ManageChannel(string channel) {
    Navigation.NavigateTo($"managechannel/{Uri.EscapeDataString(channel)}", true);
  }

  private void Relations(string channel) {
    Navigation.NavigateTo($"channel/{Uri.EscapeDataString(channel)}", true);
  }

  private void AddChannel() {
    Navigation.NavigateTo("addchannel", true);
  }

  private void LocalStorage(string channel) {
    Navigation.NavigateTo($"localchannel{(!string.IsNullOrWhiteSpace(channel) ? $"/{Uri.EscapeDataString(channel)}" : string.Empty)}", true);
  }

}
