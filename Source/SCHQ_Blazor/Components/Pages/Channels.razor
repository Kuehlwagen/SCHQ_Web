@page "/channels"
@using Google.Protobuf.WellKnownTypes
@using Grpc.Net.Client
@using static SCHQ_Protos.SCHQ_Relations
@attribute [StreamRendering(false)]
@inject IConfiguration Config
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IStringLocalizer<Resource> Localizer

<PageTitle>SCHQ Web > @Localizer["Channels"]</PageTitle>

<h1>@Localizer["Channels"]</h1>

@if (channels == null) {
  <p><em>@Localizer["Loading"]...</em></p>
} else if (channels.Length == 0) {
  <p><em>@Localizer["No channels found"]</em></p>
  <p>
    <div class="btn-group">
      <button type="button" class="btn btn-primary btn-sm p-2" @onclick="AddChannel" title="@Localizer["Add Channel"]">
        @Localizer["Add Channel"]
      </button>
    </div>
  </p>
} else {
  <p>
    <div class="btn-group">
      <button type="button" class="btn btn-primary btn-sm p-2" @onclick="AddChannel" title="@Localizer["Add Channel"]">
        @Localizer["Add Channel"]
      </button>
    </div>
  </p>
  <p>
    <div class="input-group">
      <div class="form-floating">
        <input type="text" class="form-control" id="floatingInputGroupChannelFilter" placeholder="@Localizer["Filter"]" @bind=Filter @bind:event="oninput">
        <label for="floatingInputGroupChannelFilter">@Localizer["Filter"]</label>
      </div>
      <button class="btn btn-primary" type="button" @onclick="GetChannels" title="@Localizer["Refresh Channels"]">
        <svg class="bi" width="16" height="16" fill="currentColor">
          <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#arrow-clockwise" />
        </svg>
      </button>
    </div>
  </p>
  <table class="table table-striped">
    <thead>
      <tr>
        <th>@Localizer["Name"]</th>
        <th width="1%">@Localizer["Perm."]</th>
        <th width="1%">@Localizer["Mng."]</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var channel in channels.Where(c => IsVisible(c))) {
        <tr>
          <td class="align-middle" style="transform: rotate(0);">
            <a href="" class="link-underline link-underline-opacity-0 link-underline-opacity-50-hover stretched-link" @onclick="() => Relations(channel.Name)">
              @channel.Name
            </a>
            <div class="text-muted fw-lighter" hidden="@(string.IsNullOrWhiteSpace(channel.Description))">
              <small>@channel.Description</small>
            </div>
          </td>
          <td class="align-middle" style="transform: rotate(0);">
            <svg class="bi text-lighter" width="18" height="18" fill="currentColor">
              @if (channel.Permissions == ChannelPermissions.Write) {
                <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#pencil-square" />
              } else if (channel.Permissions == ChannelPermissions.Read) {
                <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#eye" />
              } else {
                <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#shield-lock" />
              }
            </svg>
          </td>
          <td class="align-middle text-end">
            <div class="btn-group">
              <button type="button" class="btn btn-primary btn-sm p-2" @onclick="async () => ManageChannel(channel.Name)" title="@Localizer["Manage Channel"]">
                <svg class="bi" width="14" height="14" fill="currentColor">
                  <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#gear" />
                </svg>
              </button>
            </div>
          </td>
        </tr>
      }
    </tbody>
  </table>
}

@code {
  private ChannelInfo[]? channels;
  public string? Filter { get; set; }

  protected async override Task OnInitializedAsync() {
    await GetChannels();
  }

  private async Task GetChannels() {
    SCHQ_RelationsClient gRPC_Client = new(GrpcChannel.ForAddress(Navigation.BaseUri, new() {
        HttpHandler = new SocketsHttpHandler() {
          PooledConnectionIdleTimeout = Timeout.InfiniteTimeSpan,
          KeepAlivePingDelay = TimeSpan.FromSeconds(60),
          KeepAlivePingTimeout = TimeSpan.FromSeconds(30),
          EnableMultipleHttp2Connections = true
        }
      }));
    ChannelsReply reply = await gRPC_Client.GetChannelsAsync(new());
    channels = [.. reply?.Channels];
  }

  public bool IsVisible(ChannelInfo channel) {
    if (string.IsNullOrWhiteSpace(Filter))
      return true;

    if (channel.Name.Contains(Filter, StringComparison.InvariantCultureIgnoreCase))
      return true;

    return false;
  }

  private void ManageChannel(string channel) {
    Navigation.NavigateTo($"managechannel?channel={channel}", true);
  }

  private void Relations(string channel) {
    Navigation.NavigateTo($"relations?channel={channel}", true);
  }

  private void AddChannel() {
    Navigation.NavigateTo("addchannel", true);
  }

}
