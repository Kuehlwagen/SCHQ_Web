@page "/addchannel"
@using Google.Protobuf.WellKnownTypes
@using Grpc.Net.Client
@using SCHQ_Blazor.Classes
@using static SCHQ_Protos.SCHQ_Relations
@attribute [StreamRendering(false)]
@inject IConfiguration Config
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IStringLocalizer<Resource> Localizer

<PageTitle>SCHQ Web > @Localizer["Add Channel"]</PageTitle>

<h1>@Localizer["Add Channel"]</h1>
<p>
  <div class="input-group">
    <div class="form-floating">
      <input type="text" class="form-control" id="floatingInputGroupChannel" placeholder="@Localizer["Channel Name"]*" @bind=Name @bind:event="oninput">
      <label for="floatingInputGroupChannel">@Localizer["Channel Name"]*</label>
    </div>
  </div>
</p>
<p>
  <div class="input-group">
    <div class="form-floating">
      <input type="password" class="form-control @(Password != ConfirmPassword ? "border-danger" : string.Empty)" id="floatingInputGroupPassword" placeholder="@Localizer["Channel Password"]" @bind=Password @bind:event="oninput">
      <label for="floatingInputGroupPassword">@Localizer["Channel Password"]</label>
    </div>
  </div>
</p>
<p>
  <div class="input-group">
    <div class="form-floating">
      <input type="password" class="form-control @(Password != ConfirmPassword ? "border-danger" : string.Empty)" id="floatingInputGroupPasswordConfirm" placeholder="@Localizer["Confirm Channel Password"]" @bind=ConfirmPassword @bind:event="oninput">
      <label for="floatingInputGroupPasswordConfirm">@Localizer["Confirm Channel Password"]</label>
    </div>
  </div>
</p>
<p hidden="@(Password != null && Password.Length > 0)">
  <div class="bg-warning text-dark px-2 rounded">@Localizer["Channels without password will be deleted on server restart."]</div>
</p>
<p>
  <div class="input-group">
    <div class="form-floating">
      <select class="form-select" @bind=Permissions id="floatingInputGroupPermissions">
        <option value="Write" selected>@Localizer["Write"]</option>
        <option value="Read">@Localizer["Read"]</option>
        <option value="None">@Localizer["None"]</option>
      </select>
      <label for="floatingInputGroupPermissions">@Localizer["Channel Permissions"]*</label>
    </div>
  </div>
</p>
<p>
  <div class="input-group">
    <div class="form-floating">
      <input type="password" class="form-control @(AdminPassword != AdminConfirmPassword ? "border-danger" : string.Empty)" id="floatingInputGroupAdminPassword" placeholder="@Localizer["Admin Password"]*" @bind=AdminPassword @bind:event="oninput">
      <label for="floatingInputGroupAdminPassword">@Localizer["Admin Password"]*</label>
    </div>
  </div>
</p>
<p>
  <div class="input-group">
    <div class="form-floating">
      <input type="password" class="form-control @(AdminPassword != AdminConfirmPassword ? "border-danger" : string.Empty)" id="floatingInputGroupAdminPasswordConfirm" placeholder="@Localizer["Confirm Admin Password"]*" @bind=AdminConfirmPassword @bind:event="oninput">
      <label for="floatingInputGroupAdminPasswordConfirm">@Localizer["Confirm Admin Password"]*</label>
    </div>
  </div>
</p>
<p><button type="button" class="btn btn-primary" @onclick="Add" disabled="@ButtonIsDisabled">@Localizer["Add Channel"]</button></p>
<p>
  <div class="alert alert-danger" role="alert" hidden="@(ErrorText == null)">
    <i>@ErrorText</i>
  </div>
</p>

@code {
  private string? _name;
  [SupplyParameterFromQuery]
  public string? Name {
    get { return _name; }
    set {
      _name = value;
      ButtonIsDisabled = CheckButtonIsDisabled;
    }
  }
  private string? _password = string.Empty;
  private string? Password {
    get { return _password; }
    set {
      _password = value;
      ButtonIsDisabled = CheckButtonIsDisabled;
    }
  }
  private string? _confirmPassword= string.Empty;
  private string? ConfirmPassword {
    get { return _confirmPassword; }
    set {
      _confirmPassword = value;
      ButtonIsDisabled = CheckButtonIsDisabled;
    }
  }
  private string? _adminPassword = string.Empty;
  private string? AdminPassword {
    get { return _adminPassword; }
    set {
      _adminPassword = value;
      ButtonIsDisabled = CheckButtonIsDisabled;
    }
  }
  private string? _adminConfirmPassword = string.Empty;
  private string? AdminConfirmPassword {
    get { return _adminConfirmPassword; }
    set {
      _adminConfirmPassword = value;
      ButtonIsDisabled = CheckButtonIsDisabled;
    }
  }
  private string? Permissions { get; set; }
  private bool ButtonIsDisabled { get; set; } = true;
  private string? ErrorText { get; set; }

  private bool CheckButtonIsDisabled {
    get { return string.IsNullOrWhiteSpace(_name) || Password != ConfirmPassword || string.IsNullOrWhiteSpace(AdminPassword) || AdminPassword != AdminConfirmPassword || Password == AdminPassword; }
  }

  private async void Add() {
    ErrorText = null;
    StateHasChanged();
    if (!string.IsNullOrWhiteSpace(Name)) {
      SCHQ_RelationsClient gRPC_Client = new(GrpcChannel.ForAddress(Navigation.BaseUri, new() {
          HttpHandler = new SocketsHttpHandler() {
            PooledConnectionIdleTimeout = Timeout.InfiniteTimeSpan,
            KeepAlivePingDelay = TimeSpan.FromSeconds(60),
            KeepAlivePingTimeout = TimeSpan.FromSeconds(30),
            EnableMultipleHttp2Connections = true
          }
        }));
      SuccessReply reply = await gRPC_Client.AddChannelAsync(new() {
        Channel = Name,
        AdminPassword = AdminPassword ?? string.Empty,
        Permissons = System.Enum.TryParse<ChannelPermissions>(Permissions, out ChannelPermissions cp) ? cp : ChannelPermissions.None });
      if (reply.Success) {
        await LocalStorageService.SetValue(JS, $"pwd{Name}", Password, true);
        Navigation.NavigateTo($"/relations?channel={Name}");
      }
      else {
        ErrorText = reply.Info;
        StateHasChanged();
      }
    }
  }
}
