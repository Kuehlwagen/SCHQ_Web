@page "/managechannel"
@using Google.Protobuf.Collections
@using Google.Protobuf.WellKnownTypes
@using Grpc.Net.Client
@using System.Text.Json
@using System.Text.Json.Serialization
@using static SCHQ_Protos.SCHQ_Relations
@attribute [StreamRendering(false)]
@inject IJSRuntime JsRuntime
@inject IConfiguration Config
@inject NavigationManager Navigation
@inject IStringLocalizer<Resource> Localizer

<script>
  window.downloadFileFromStream = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
  }
</script>

<PageTitle>SCHQ Web</PageTitle>

<h1>@Localizer["Manage Channel"]</h1>

@if (string.IsNullOrWhiteSpace(Channel)) {
  <p>No channel name provided</p>
} else {
  <p>
    <div class="form-floating">
      <input type="password" class="form-control" id="floatingInputGroupChannelPassword" placeholder="@Channel @Localizer["Channel Password"]" @bind-value=Password>
      <label for="floatingInputGroupChannelPassword">@Channel @Localizer["Channel Password"]</label>
    </div>
  </p>
  <p>
    <div class="btn-group">
      <button type="button" class="btn btn-primary" @onclick="Download" disabled="@IsBusy">
        <svg class="bi" width="16" height="16" fill="currentColor">
          <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#download" />
        </svg>
        @Localizer["Relations"]
      </button>
      <label class="btn btn-primary" style="display: inline-flex; align-items: center; background-color: @(IsBusy ? "#61A1FE" : "#1B6EC2");" for="input-file" disabled="@IsBusy">
        <svg class="bi" width="16" height="16" fill="currentColor">
          <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#upload" />
        </svg>&nbsp;
        @Localizer["Relations"]
      </label>
      <button type="button" class="btn btn-danger" @onclick="Delete">
        <svg class="bi" width="16" height="16" fill="currentColor">
          <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#x-lg" />
        </svg>
        @Localizer["Channel"]
      </button>
    </div>
  </p>
  <div class="alert alert-danger" role="alert" hidden="@(ErrorText == null)">
    <i>@ErrorText</i>
  </div>
  <InputFile OnChange="@Upload" accept="text/csv,application/json" id="input-file" disabled="@IsBusy" multiple hidden />
}

@code {
  [SupplyParameterFromQuery]
  public string? Channel { get; set; }
  private string? Password;
  private bool IsBusy { get; set; }
  private string? ErrorText { get; set; }

  private async void Delete() {
    ErrorText = null;
    bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"{Localizer["Channel"]} [{Channel}]:{Environment.NewLine}{Localizer["Do you really want to delete the gRPC channel?"]}");
    if (confirmed) {
      string? gRPC_Url = Config.GetValue<string>("gRPC_Url");
      if (gRPC_Url != null) {
        SCHQ_RelationsClient gRPC_Client = new(GrpcChannel.ForAddress(gRPC_Url,
          new() {
            HttpHandler = new SocketsHttpHandler() {
              PooledConnectionIdleTimeout = Timeout.InfiniteTimeSpan,
              KeepAlivePingDelay = TimeSpan.FromSeconds(60),
              KeepAlivePingTimeout = TimeSpan.FromSeconds(30),
              EnableMultipleHttp2Connections = true
            }
          }));
        SuccessReply reply = await gRPC_Client.RemoveChannelAsync(new() { Channel = Channel, Password = Password ?? string.Empty });
        if (reply.Success) {
          Navigation.NavigateTo("/", true);
        } else {
          ErrorText = reply.Info;
          StateHasChanged();
        }
      }
    }
  }

  private async Task Download() {
    ErrorText = null;
    IsBusy = true;
    StateHasChanged();
    string? gRPC_Url = Config.GetValue<string>("gRPC_Url");
    if (gRPC_Url != null) {
      SCHQ_RelationsClient gRPC_Client = new(GrpcChannel.ForAddress(gRPC_Url,
        new() {
          HttpHandler = new SocketsHttpHandler() {
            PooledConnectionIdleTimeout = Timeout.InfiniteTimeSpan,
            KeepAlivePingDelay = TimeSpan.FromSeconds(60),
            KeepAlivePingTimeout = TimeSpan.FromSeconds(30),
            EnableMultipleHttp2Connections = true
          }
        }));
      RelationsReply reply = await gRPC_Client.GetRelationsAsync(new() {
          Channel = Channel,
          Password = Password ?? string.Empty
        });
      if (reply?.Relations?.Count > 0) {
        try {
          using MemoryStream relationsStream = new();
          JsonSerializer.Serialize<RelationInfo[]>(relationsStream, reply.Relations.ToArray() ?? [],
            new JsonSerializerOptions() {
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault,
                WriteIndented = true
              });
          using var streamRef = new DotNetStreamReference(relationsStream);
          streamRef.Stream.Position = 0;
          await JsRuntime.InvokeVoidAsync("downloadFileFromStream", $"SCHQ_Web_Relations_{Channel}_{DateTime.Now:yyyyMMdd_HHmmss}.json", streamRef);
        } catch (Exception ex) {
          ErrorText = $"Exception: {ex.Message}, Inner-Exception: {ex.InnerException?.Message ?? "Empty"}";
        }
      } else {
        ErrorText = "No relations found";
      }
    }
    IsBusy = false;
    StateHasChanged();
  }

  private async Task Upload(InputFileChangeEventArgs e) {
    ErrorText = null;
    StateHasChanged();
    try {
      switch (e.File?.ContentType) {
        case "application/json": {
            string reader = await new StreamReader(e.File.OpenReadStream()).ReadToEndAsync();
            if (reader?.Length > 0) {
              List<RelationInfo> relations = JsonSerializer.Deserialize<RelationInfo[]>(reader)?.Where(r => !string.IsNullOrWhiteSpace(r.Name)).ToList() ?? [];
              if (relations?.Count > 0) {
                if (await SetRelations(relations)) {
                  Navigation.NavigateTo($"/relations?channel={Channel}");
                }
              } else {
                ErrorText = "No relations found";
              }
            } else {
              ErrorText = "File is empty";
            }
            break;
          }
        case "text/csv": {
            string reader = await new StreamReader(e.File.OpenReadStream()).ReadToEndAsync();
            if (reader?.Length > 0) {
              string[] fields;
              List<RelationInfo> relations = [];
              RelationInfo relation;
              foreach (string line in reader.Split(Environment.NewLine)) {
                fields = line.Split(';');
                if (!string.IsNullOrWhiteSpace(fields[0])) {
                  relation = new() {
                    Name = fields[0]
                  };
                  if (fields.Length > 1 && int.TryParse(fields[1], out int relVal)) {
                    relation.Relation = (RelationValue)relVal;
                  }
                  if (fields.Length > 2 && int.TryParse(fields[2], out int relType)) {
                    relation.Type = (RelationType)relType;
                  }
                  relations.Add(relation);
                }
              }
              if (relations.Count > 0) {
                if (await SetRelations(relations)) {
                  Navigation.NavigateTo($"/relations?channel={Channel}");
                }
              } else {
                ErrorText = "No relations found";
              }
            } else {
              ErrorText = "File is empty";
            }
            break;
          }
        default:
          ErrorText = $"File type [{e.File?.ContentType}] not supported";
          break;
      }
    } catch (Exception ex) {
      ErrorText = $"Exception: {ex.Message}, Inner-Exception: {ex.InnerException?.Message ?? "Empty"}";
    }
    StateHasChanged();
  }

  private async Task<bool> SetRelations(List<RelationInfo> relations) {
    bool success = false;

    string? gRPC_Url = Config.GetValue<string>("gRPC_Url");
    if (gRPC_Url != null) {
      SCHQ_RelationsClient gRPC_Client = new(GrpcChannel.ForAddress(gRPC_Url,
        new() {
          HttpHandler = new SocketsHttpHandler() {
            PooledConnectionIdleTimeout = Timeout.InfiniteTimeSpan,
            KeepAlivePingDelay = TimeSpan.FromSeconds(60),
            KeepAlivePingTimeout = TimeSpan.FromSeconds(30),
            EnableMultipleHttp2Connections = true
          }
        }));
      SetRelationsRequest request = new() {
        Channel = Channel,
        Password = Password ?? string.Empty,
      };
      request.Relations.AddRange(relations);
      SuccessReply reply = await gRPC_Client.SetRelationsAsync(request);
      success = reply.Success;
      if (!success) {
        ErrorText = reply.Info ?? "Unknown error";
      }
    }

    return success;
  }
}
