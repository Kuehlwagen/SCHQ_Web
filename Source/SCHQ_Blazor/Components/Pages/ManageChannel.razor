@page "/managechannel/{ChannelName}"
@using System.Text.Json
@using System.Text.Json.Serialization
@using SCHQ_Blazor.Classes
@using System.Web
@using SCHQ_Blazor.Services
@using static SCHQ_Protos.SCHQ_Relations
@attribute [StreamRendering(false)]
@inject IJSRuntime JS
@inject IConfiguration Config
@inject NavigationManager Navigation
@inject IStringLocalizer<Resource> Localizer
@inject SCHQ_Service SCHQ

<script>
  window.downloadFileFromStream = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
  }
</script>

<PageTitle>SCHQ Web > @Localizer["Manage Channel"] > @Localizer["Channel"]: @ChannelName</PageTitle>

<h1>@ChannelName</h1>

@if (string.IsNullOrWhiteSpace(ChannelName)) {
  <p>No channel name provided</p>
} else {
  <p>
    <div class="form-floating">
      <input type="password" class="form-control" id="floatingInputGroupChannelPassword" placeholder="@Localizer["Admin Password"]*" @bind=AdminPassword @bind:event="oninput">
      <label for="floatingInputGroupChannelPassword">@Localizer["Admin Password"]*</label>
    </div>
  </p>
  <p>
    <div class="input-group">
      <div class="form-floating">
        <input type="text" class="form-control" id="floatingInputGroupNewChannelName" placeholder="@Localizer["New Channel Name"]" @bind=NewChannelName @bind:event="oninput">
        <label for="floatingInputGroupNewChannelName">@Localizer["New Channel Name"]</label>
      </div>
    </div>
  </p>
  <p>
    <div class="form-floating">
      <input type="password" class="form-control @(NewAdminPassword != ConfirmNewAdminPassword ? "border-danger" : string.Empty)" id="floatingInputGroupNewAdminPassword" placeholder="@Localizer["New Admin Password"]" @bind=NewAdminPassword @bind:event="oninput">
      <label for="floatingInputGroupNewAdminPassword">@Localizer["New Admin Password"]</label>
    </div>
  </p>
  <p>
    <div class="form-floating">
      <input type="password" class="form-control @(NewAdminPassword != ConfirmNewAdminPassword ? "border-danger" : string.Empty)" id="floatingInputGroupConfirmNewAdminPassword" placeholder="@Localizer["Confirm New Admin Password"]" @bind=ConfirmNewAdminPassword @bind:event="oninput">
      <label for="floatingInputGroupConfirmNewAdminPassword">@Localizer["Confirm New Admin Password"]</label>
    </div>
  </p>
  <p>
    <div class="input-group">
      <div class="form-floating">
        <input type="text" class="form-control" id="floatingInputGroupDescription" placeholder="@Localizer["Channel Description"]" @bind=Description @bind:event="oninput">
        <label for="floatingInputGroupDescription">@Localizer["Channel Description"]</label>
      </div>
    </div>
  </p>
  <p>
    <div class="form-floating">
      <input type="password" class="form-control @(NewPassword != ConfirmNewPassword ? "border-danger" : string.Empty)" id="floatingInputGroupNewChannelPassword" placeholder="@Localizer["New Channel Password"]" @bind=NewPassword @bind:event="oninput">
      <label for="floatingInputGroupNewChannelPassword">@Localizer["New Channel Password"]</label>
    </div>
  </p>
  <p>
    <div class="form-floating">
      <input type="password" class="form-control @(NewPassword != ConfirmNewPassword ? "border-danger" : string.Empty)" id="floatingInputGroupConfirmNewChannelPassword" placeholder="@Localizer["Confirm New Channel Password"]" @bind=ConfirmNewPassword @bind:event="oninput">
      <label for="floatingInputGroupConfirmNewChannelPassword">@Localizer["Confirm New Channel Password"]</label>
    </div>
  </p>
  <p>
    <div class="input-group">
      <div class="form-floating">
        <select class="form-select" @bind=Permissions id="floatingInputGroupPermissions">
          <option value="None" selected>@Localizer["None"]</option>
          <option value="Read">@Localizer["Read"]</option>
          <option value="Write">@Localizer["Write"]</option>
        </select>
        <label for="floatingInputGroupPermissions">@Localizer["Channel Permissions"]*</label>
      </div>
    </div>
  </p>
  <p>
    <div class="btn-group">
      <button type="button" class="btn btn-primary" @onclick="Save" disabled="@ButtonIsDisabled" title="@Localizer["Save"]">
        <svg class="bi" width="16" height="16" fill="currentColor">
          <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#floppy2-fill" />
        </svg>
      </button>
      <button type="button" class="btn btn-danger" @onclick="Delete" title="@Localizer["Delete Channel"]">
        <svg class="bi" width="16" height="16" fill="currentColor">
          <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#x-lg" />
        </svg>
      </button>
      <button type="button" class="btn btn-primary" @onclick="Download" disabled="@IsBusy" title="@Localizer["Download Relations"]">
        <svg class="bi" width="16" height="16" fill="currentColor">
          <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#download" />
        </svg>
        @Localizer["Relations"]
      </button>
      <label class="btn btn-primary" style="display: inline-flex; align-items: center; background-color: @(IsBusy ? "#61A1FE" : "#1B6EC2");" for="input-file" disabled="@IsBusy" title="@Localizer["Upload Relations"]">
        <svg class="bi" width="16" height="16" fill="currentColor">
          <use xlink:href="/lib/bootstrap-icons/bootstrap-icons.svg#upload" />
        </svg>&nbsp;
        @Localizer["Relations"]
      </label>
    </div>
  </p>
  <div class="alert alert-danger" role="alert" hidden="@(ErrorText == null)">
    <i>@ErrorText</i>
  </div>
  <InputFile OnChange="@Upload" accept="text/csv,application/json" id="input-file" disabled="@IsBusy" multiple hidden />
}

@code {
  [Parameter]
  public string? ChannelName { get; set; }
  private string? _newChannelName = string.Empty;
  private string? NewChannelName {
    get { return _newChannelName; }
    set {
      _newChannelName = value;
      ButtonIsDisabled = CheckButtonIsDisabled;
    }
  }
  public ChannelInfo? ChannelInformation { get; set; }
  private string? AdminPassword = string.Empty;
  private string? _newPassword = string.Empty;
  private string? NewPassword {
    get { return _newPassword; }
    set {
      _newPassword = value;
      ButtonIsDisabled = CheckButtonIsDisabled;
    }
  }
  private string? _confirmNewPassword = string.Empty;
  private string? ConfirmNewPassword {
    get { return _confirmNewPassword; }
    set {
      _confirmNewPassword = value;
      ButtonIsDisabled = CheckButtonIsDisabled;
    }
  }
  private string? _newAdminPassword = string.Empty;
  private string? NewAdminPassword
  {
    get { return _newAdminPassword; }
    set
    {
      _newAdminPassword = value;
      ButtonIsDisabled = CheckButtonIsDisabled;
    }
  }
  private string? _confirmNewAdminPassword = string.Empty;
  private string? ConfirmNewAdminPassword
  {
    get { return _confirmNewAdminPassword; }
    set
    {
      _confirmNewAdminPassword = value;
      ButtonIsDisabled = CheckButtonIsDisabled;
    }
  }
  private string? Description { get; set; }
  private string? Permissions { get; set; }
  private bool ButtonIsDisabled { get; set; } = true;
  private bool CheckButtonIsDisabled {
    get { return NewPassword != ConfirmNewPassword || NewAdminPassword != ConfirmNewAdminPassword || NewChannelName == ChannelName || (AdminPassword!.Length > 0 && NewPassword == AdminPassword); }
  }
  private bool IsBusy { get; set; }
  private string? ErrorText { get; set; }

  protected override async Task OnInitializedAsync() {
    ChannelReply reply = await SCHQ.GetChannel(new() { Channel = ChannelName });
    if (reply != null && reply.Found && reply.Channel?.Name == ChannelName) {
      ChannelInformation = reply?.Channel;
      Permissions = ChannelInformation?.Permissions.ToString();
      Description = reply?.Channel?.Description ?? string.Empty;
    }
    ButtonIsDisabled = CheckButtonIsDisabled;
    StateHasChanged();
  }

  private async void Save() {
    ErrorText = null;
    SuccessReply reply = await SCHQ.UpdateChannel(new() {
        Channel = ChannelName,
        NewChannelName = NewChannelName,
        Description = Description,
        AdminPassword = AdminPassword,
        NewPassword = NewPassword,
        NewPasswordConfirm = ConfirmNewPassword,
        NewAdminPassword = NewAdminPassword,
        NewAdminPasswordConfirm = ConfirmNewAdminPassword,
        Permissions = System.Enum.TryParse<ChannelPermissions>(Permissions, out ChannelPermissions cp) ? cp : ChannelPermissions.None
      });
    if (reply.Success) {
      await LocalStorageService.SetValue(JS, $"pwd{ChannelName}", NewPassword, true);
      Navigation.NavigateTo("/", true);
    } else {
      ErrorText = reply.Info;
      StateHasChanged();
    }
  }

  private async void Delete() {
    ErrorText = null;
    bool confirmed = await JS.InvokeAsync<bool>("confirm", $"{Localizer["Channel"]} [{ChannelName}]:{Environment.NewLine}{Localizer["Do you really want to delete the channel?"]}");
    if (confirmed) {
      SuccessReply reply = await SCHQ.RemoveChannel(new() { Channel = ChannelName, AdminPassword = AdminPassword ?? string.Empty });
      if (reply.Success) {
        await LocalStorageService.RemoveValue(JS, $"pwd{ChannelName}");
        Navigation.NavigateTo("/", true);
      } else {
        ErrorText = reply.Info;
        StateHasChanged();
      }
    }
  }

  private async Task Download() {
    ErrorText = null;
    IsBusy = true;
    StateHasChanged();
    RelationsReply reply = await SCHQ.GetRelations(new() {
        Channel = ChannelName,
        Password = AdminPassword ?? string.Empty
      });
    if (reply?.Relations?.Count > 0) {
      try {
        using MemoryStream relationsStream = new();
        JsonSerializer.Serialize<RelationInfo[]>(relationsStream, reply.Relations.ToArray() ?? [],
          new JsonSerializerOptions() {
              DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault,
              WriteIndented = true
            });
        using var streamRef = new DotNetStreamReference(relationsStream);
        streamRef.Stream.Position = 0;
        await JS.InvokeVoidAsync("downloadFileFromStream", $"SCHQ_Web_Relations_{ChannelName}_{DateTime.Now:yyyyMMdd_HHmmss}.json", streamRef);
      } catch (Exception ex) {
        ErrorText = $"{Localizer["Exception"]}: {ex.Message}, {Localizer["Inner Exception"]}: {ex.InnerException?.Message ?? Localizer["Empty"]}";
      }
    } else {
      ErrorText = !string.IsNullOrWhiteSpace(reply?.Info) ? reply.Info : Localizer["No relations found"];
    }
    IsBusy = false;
    StateHasChanged();
  }

  private async Task Upload(InputFileChangeEventArgs e) {
    ErrorText = null;
    StateHasChanged();
    try {
      switch (e.File?.ContentType) {
        case "application/json": {
            string reader = await new StreamReader(e.File.OpenReadStream()).ReadToEndAsync();
            if (reader?.Length > 0) {
              List<RelationInfo> relations = JsonSerializer.Deserialize<RelationInfo[]>(reader)?.Where(r => !string.IsNullOrWhiteSpace(r.Name)).ToList() ?? [];
              if (relations?.Count > 0) {
                if (await SetRelations(relations)) {
                  Navigation.NavigateTo($"/channel/{HttpUtility.UrlEncode(ChannelName)}");
                }
              } else {
                ErrorText = Localizer["No relations found"];
              }
            } else {
              ErrorText = Localizer["File is empty"];
            }
            break;
          }
        case "text/csv": {
            string reader = await new StreamReader(e.File.OpenReadStream()).ReadToEndAsync();
            if (reader?.Length > 0) {
              string[] fields;
              List<RelationInfo> relations = [];
              RelationInfo relation;
              foreach (string line in reader.Split(Environment.NewLine)) {
                fields = line.Split(';');
                if (!string.IsNullOrWhiteSpace(fields[0])) {
                  relation = new() {
                      Name = fields[0]
                    };
                  if (fields.Length > 1 && int.TryParse(fields[1], out int relVal)) {
                    relation.Relation = (RelationValue)relVal;
                  }
                  if (fields.Length > 2 && int.TryParse(fields[2], out int relType)) {
                    relation.Type = (RelationType)relType;
                  }
                  if (fields.Length > 3 && fields[3] != null) {
                    relation.Comment = fields[3];
                  }
                  relations.Add(relation);
                }
              }
              if (relations.Count > 0) {
                if (await SetRelations(relations)) {
                  Navigation.NavigateTo($"/channel/{HttpUtility.UrlEncode(ChannelName)}");
                }
              } else {
                ErrorText = Localizer["No relations found"];
              }
            } else {
              ErrorText = Localizer["File is empty"];
            }
            break;
          }
        default:
          ErrorText = $"{Localizer["File type not supported"]}: [{e.File?.ContentType}]";
          break;
      }
    } catch (Exception ex) {
      ErrorText = $"{Localizer["Exception"]}: {ex.Message}, {Localizer["Inner Exception"]}: {ex.InnerException?.Message ?? Localizer["Empty"]}";
    }
    StateHasChanged();
  }

  private async Task<bool> SetRelations(List<RelationInfo> relations) {
    bool success = false;

    SetRelationsRequest request = new() {
        Channel = ChannelName,
        Password = AdminPassword ?? string.Empty,
      };
    request.Relations.AddRange(relations);
    SuccessReply reply = await SCHQ.SetRelations(request);
    success = reply.Success;
    if (!success) {
      ErrorText = reply.Info ?? Localizer["Unknown error"];
    }

    return success;
  }

}
